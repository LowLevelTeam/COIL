// ORION++ Simplified Instruction Set Architecture (ISA)
// For basic C integer applications only

// =============================================================================
// CORE STACK AND SCOPE MANAGEMENT 
// =============================================================================

isa.enter           // Enter new scope/stack frame
isa.leave           // Leave current scope/stack frame  
isa.RET             // Return from function

// =============================================================================
// VARIABLE OPERATIONS
// =============================================================================

isa.let var, value      // Declare and initialize variable 
isa.const var, value    // Declare constant 
isa.mov dest, src       // Move/copy value

// =============================================================================
// BASIC ARITHMETIC
// =============================================================================

isa.add dest, src1, src2    // Addition
isa.sub dest, src1, src2    // Subtraction  
isa.mul dest, src1, src2    // Multiplication
isa.div dest, src1, src2    // Division
isa.mod dest, src1, src2    // Modulo

// Unary operations
isa.neg dest, src           // Arithmetic negation (-src)

// =============================================================================
// BITWISE OPERATIONS
// =============================================================================

isa.and dest, src1, src2    // Bitwise AND
isa.or dest, src1, src2     // Bitwise OR
isa.xor dest, src1, src2    // Bitwise XOR
isa.not dest, src           // Bitwise NOT (~src)
isa.shl dest, src, count    // Shift left
isa.shr dest, src, count    // Shift right

// =============================================================================
// CONTROL FLOW - C-STYLE IF STATEMENTS
// =============================================================================

// Direct comparison branches (no flags)
isa.beq src1, src2, label   // Branch if src1 == src2
isa.bne src1, src2, label   // Branch if src1 != src2
isa.blt src1, src2, label   // Branch if src1 < src2
isa.ble src1, src2, label   // Branch if src1 <= src2
isa.bgt src1, src2, label   // Branch if src1 > src2
isa.bge src1, src2, label   // Branch if src1 >= src2

// Single operand branches
isa.beqz src, label         // Branch if src == 0
isa.bnez src, label         // Branch if src != 0

// Unconditional
isa.jmp label               // Unconditional jump
isa.call label              // Function call 

// =============================================================================
// OBJECT AND SYMBOL MANAGEMENT
// =============================================================================

obj.section [EXEC] .text               // Define executable section
obj.section [DATA] .data               // Define data section
obj.section [BSS] .bss                 // Define uninitialized data section

obj.sym[visibility,type] name          // Define symbol with attributes
// Visibility: LOCAL, GLOBAL, WEAK
// Type: FUNC, OBJECT, NULL

obj.label name                         // Define local label

// Examples:
// obj.sym[global,func] main           // Global function
// obj.sym[local,object] my_var        // Local data object
// obj.sym[weak,func] optional_func    // Weak function symbol

// =============================================================================
// EXAMPLE: SIMPLE C PROGRAM TRANSLATION
// =============================================================================

/*
C Code:
int main() {
  int a = 10;
  int b = 20;
  if (a < b) {
    return 1;
  } else {
    return 0;
  }
}
*/

obj.section [EXEC] .text
obj.sym[global,func] main:
  .hint-abi(c)
  .hint-args(null)
  .hint-rets(i32)

  abi.callee.enter

  isa.enter // {
    isa.let a, 10
    isa.let b, 20
    
    // if (a < b)
    isa.bge a, b, .else_branch    // if a >= b, go to else
    
    // return 1;
    isa.const retval, 1
    isa.jmp .end
    
    obj.label .else_branch:
    // return 0;
    isa.const retval, 0
    
    obj.label .end:
    abi.callee.setret.0 retval
  isa.leave // }

  abi.callee.leave
  isa.RET

.hint-endfunc()

// =============================================================================
// DATA OBJECTS EXAMPLE
// =============================================================================

obj.section [DATA] .data
obj.sym[global,object] hello_msg, "Hello World!\n"
obj.sym[local,object] counter, 0

obj.section [BSS] .bss  
obj.sym[local,object] buffer, 256       // 256 bytes uninitialized

// =============================================================================
// ADDITIONAL EXAMPLES
// =============================================================================

/*
C Code:
int sum(int x, int y) {
  return x + y;
}
*/

obj.sym[global,func] sum:
  .hint-abi(c)
  .hint-args(i32, i32)
  .hint-rets(i32)

  abi.callee.enter

  isa.enter // {
    isa.let x, abi.callee.getarg.0
    isa.let y, abi.callee.getarg.1
    isa.add result, x, y
    abi.callee.setret.0 result
  isa.leave // }

  abi.callee.leave
  isa.RET

.hint-endfunc()

/*
C Code:
int factorial(int n) {
  if (n <= 1) {
    return 1;
  }
  return n * factorial(n - 1);
}
*/

obj.sym[global,func] factorial:
  .hint-abi(c)
  .hint-args(i32)
  .hint-rets(i32)

  abi.callee.enter

  isa.enter // {
    isa.let n, abi.callee.getarg.0
    isa.const one, 1
    
    // if (n <= 1)
    isa.bgt n, one, .recursive_case
    
    // return 1;
    abi.callee.setret.0 one
    isa.jmp .end
    
    obj.label .recursive_case:
    // factorial(n - 1)
    abi.caller.setup
    isa.sub n_minus_1, n, one
    abi.caller.setarg.0 n_minus_1
    isa.call factorial
    isa.let fac_result, abi.caller.getret.0
    abi.caller.cleanup
    
    // return n * factorial(n - 1)
    isa.mul result, n, fac_result
    abi.callee.setret.0 result
    
    obj.label .end:
  isa.leave // }

  abi.callee.leave
  isa.RET

.hint-endfunc()

/*
C Code:
int main() {
  int i = 0;
  int sum = 0;
  while (i < 10) {
    sum = sum + i;
    i = i + 1;
  }
  return sum;
}
*/

obj.sym[global,func] main:
  .hint-abi(c)
  .hint-args(null)
  .hint-rets(i32)

  abi.callee.enter

  isa.enter // {
    isa.let i, 0
    isa.let sum, 0
    isa.const ten, 10
    isa.const one, 1
    
    obj.label .while_start:
    // while (i < 10)
    isa.bge i, ten, .while_end
    
    // sum = sum + i
    isa.add sum, sum, i
    
    // i = i + 1
    isa.add i, i, one
    
    isa.jmp .while_start
    
    obj.label .while_end:
    abi.callee.setret.0 sum
  isa.leave // }

  abi.callee.leave
  isa.RET

.hint-endfunc()
